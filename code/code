#include <TheThingsNetwork.h>
#include <SoftwareSerial.h>
#include <TinyGPS.h>

#define trigPin 6
#define echoPin 5
// Define variables:

long duration;
uint32_t distance;

TinyGPS gps;
SoftwareSerial serialgps(9, 10);
SoftwareSerial loraSerial = SoftwareSerial(8, 7);
#define debugSerial Serial
// Set your AppEUI and AppKey
const char *appEui = "70B3D57ED003EF69";
const char *appKey = "B4AF71B9B7EF65716A91CA26ABE726CC";

// Replace REPLACE_ME with TTN_FP_EU868 or TTN_FP_US915
#define freqPlan TTN_FP_EU868
int year;
byte month, day, hour, minute, second, hundredths;
unsigned long chars;
unsigned short sentences, failed_checksum;


TheThingsNetwork ttn(loraSerial, debugSerial, freqPlan);

void setup()
{
  loraSerial.begin(57600);
  debugSerial.begin(9600);

  // Define inputs and outputs
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  // Wait a maximum of 10s for Serial Monitor


  while (!debugSerial && millis() < 10000)
    ;

  debugSerial.println("-- STATUS");
  ttn.showStatus();

  debugSerial.println("-- JOIN");
  ttn.join(appEui, appKey);
  //Serial.begin(9600);/
  serialgps.begin(9600);
  debugSerial.println("==========================");
  debugSerial.println("GPS");
  debugSerial.println("===========================");
}

void loop()
{


  //  uint8_t b [6];
  //  byte payload [2];


  // Clear the trigPin by setting it LOW:

  //debugSerial.println("-- LOOP");
  while (serialgps.available())
  {
    int c = serialgps.read();
    if (gps.encode(c))
    {
      float latitude, longitude;
      gps.f_get_position(&latitude, &longitude);

      uint32_t latit = (latitude) * 1000000;
      uint32_t longit = (longitude) * 100000;



      debugSerial.println("-- LOOP");
      debugSerial.print("Latitude: ");

      debugSerial.println(latit);

      debugSerial.print("Longitude: ");

      debugSerial.println(longit);

      debugSerial.println();

      gps.stats(&chars, &sentences, &failed_checksum);

      digitalWrite(trigPin, LOW);

      delayMicroseconds(5);
      // Trigger the sensor by setting the trigPin high for 10 microseconds:
      digitalWrite(trigPin, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigPin, LOW);

      // Read the echoPin. pulseIn() returns the duration (length of the pulse) in microseconds:
      uint32_t duration = pulseIn(echoPin, HIGH);

      // Calculate the distance:
      distance = (duration * ( 0.034 / 2)) * 10000;

      // Print the distance on the Serial Monitor (Ctrl+Shift+M):
      Serial.print("Distance = ");
      Serial.print(distance);
      Serial.println(" cm");
      uint8_t payload [9];
      
      payload[0] = latit;
      payload[1] = latit >> 8;
      payload[2] = latit >> 16;
      payload[3] = longit;
      payload[4] = longit >> 8;
      payload[5] = longit >> 16;
      payload[6] = distance;
      payload[7] = distance >> 8;
      payload[8] = distance >> 16;


      //      b[6] = highByte (distance);
      //      b[7] = lowByte (distance);
      //      b[8] = distance >> 16;

//      ttn.sendBytes(b, sizeof(b));
      ttn.sendBytes(payload, sizeof(payload));
      delay(2000);
    }


  }
}
